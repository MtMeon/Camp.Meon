#include <stdio.h>
#include <stdlib.h>
#include <Time.h>


struct input
{
	int lct[100][4], cnt; // 위치, 방향, 총이동거리, 등수
};

struct output
{
	int point[100][2]; // 위치, 방향
};


main()
{
	struct input at, bkt, fid, err, end, temp;
	struct output disp;

	// 초기값

	at.cnt = 3;
	bkt.cnt = 0;
	fid.cnt = 0;
	err.cnt = 0;
	end.cnt = 0;
	temp.cnt = 0;

	for (int i = 0; i < 100; i++)
	{
		for (int t = 0; t < 4; t++)
		{
			at.lct[i][t] = 0;
			bkt.lct[i][t] = 0;
		}
	}

	for (int i = 0; i < 100; i++)
	{
		for (int t = 0; t < 2; t++)
		{
			disp.point[i][t] = 0;
		}
	}

	// 본문

	// 제목
	printf("[[ 개미 이동과 장애물 ]]\n");

	// 총 이동범위
	do
	{
		printf("총 이동 범위 입력 - ");
		scanf("%d", &fid.cnt);
		if (fid.cnt == 0)
		{
			printf("다시 입력해주세요\n");
			err.cnt = 1;
		}

		else if (fid.cnt > 101)
		{
			printf("최대 100까지 가능합니다.\n");
			err.cnt = 1;
		}

		else
		{
			err.cnt = 0;
		}
	} while (err.cnt != 0);


	// 시작위치 입력 - 개미 위치, 방향
	for (int i = 0; i < at.cnt;)
	{
		printf("총 %d 마리 중 %d 번째 개미 위치 - ", at.cnt, i + 1);
		scanf("%d", &at.lct[i][0]);
		if (at.lct[i][0] > fid.cnt)
		{
			printf("총 이동범위보다 큽니다. 다시 입력하세요.\n");
		}
		else
		{
			printf("방향 ( 1.시작방향 // 2.끝방향 ) - ");
			scanf("%d", &at.lct[i][1]);
			if (at.lct[i][1] > 2)
			{
				printf("다시 입력하세요.\n");
			}

			else if (at.lct[i][1] == 0)
			{
				printf("다시 입력하세요.\n");
			}

			else
			{
				printf("%d 번째 개미 출발위치 - %d / ", i + 1, at.lct[i][0]);
				if (at.lct[i][1] == 1)
				{
					printf("시작 방향으로");
					at.lct[i][1] = -1;
				}
				else if (at.lct[i][1] == 2)
				{
					printf("끝 방향으로");
					at.lct[i][1] = 1;
				}
				printf(" 이동합니다.\n");
				i++;
			}
		}
	}

	// 장애물 입력
	do
	{
		printf("장애물 설치 수 - ");
		scanf("%d", &bkt.cnt);
		if (bkt.cnt >= fid.cnt)
		{
			printf("총 이동 범위보다 적어야 합니다.\n");
			err.cnt = 1;
		}
		else
		{
			err.cnt = 0;
		}
	} while (err.cnt == 1);

	// 장애물 위치 >>> 중첩요소 남음
	do
	{
		// 장애물 위치 무작위선정
		srand((unsigned)time(NULL));
		for (int i = 0; i < bkt.cnt;)
		{
			bkt.lct[i][0] = rand() % fid.cnt + 1;
			if (bkt.lct[i][0] > 0)
			{
				if (bkt.lct[i][0] < fid.cnt)
				{
					err.cnt = 0;
					for (int k = 0; k < at.cnt; k++)
					{
						if (bkt.lct[i][0] == at.lct[k][0])
						{
							err.cnt = err.cnt + 1;
						}
					}

					if (err.cnt == 0)
					{
						i++;
					}
				}
			}
		}

		// 장애물 위치 중복 제외
		for (int i = 0; i < bkt.cnt - 1; i++)
		{
			for (int t = i + 1; t < bkt.cnt; t++)
			{
				if (bkt.lct[i][0] == bkt.lct[t][0]) // 중복인 경우
				{
					err.cnt = err.cnt + 1;
				}

				else // 중복이 아닌 경우
				{
					if (err.cnt == 0) // 중복이 없었던 경우
					{
						err.cnt = 0;
					}

					else if (err.cnt > 0) // 중복이 있을 경우
					{
						err.cnt = err.cnt - 1;
					}
				}
			}
		}

	} while (err.cnt != 0);

	// 초기위치 - 개미
	for (int i = 0; i < at.cnt; i++)
	{
		disp.point[at.lct[i][0]][0] = i + 1;
		disp.point[at.lct[i][0]][1] = at.lct[i][1];
	}

	// 초기위치 - 장애물
	for (int i = 0; i < bkt.cnt; i++)
	{
		disp.point[bkt.lct[i][0]][0] = i + 1;
		disp.point[bkt.lct[i][0]][1] = 3;
		// printf("장애물 - %d / 위치 - %d\n", i+1, bkt.lct[i][0]);
	}

	for (int c = 0, w = 1; c < 1;)
	{
		// 위치 표시
		printf("| 시작 |");
		for (int i = 1; i < fid.cnt; i++)
		{
			if (disp.point[i][0] > 0)
			{
				if (disp.point[i][1] != 0)
				{
					if (disp.point[i][1] < 2)
					{
						printf("( ");
						if (disp.point[i][1] == -1)
						{
							printf("<<<");
						}
						printf(" 개미 %d ", disp.point[i][0]);
						if (disp.point[i][1] == 1)
						{
							printf(">>>");
						}
						printf(" )");
					}

					else if (disp.point[i][1] == 3)
					{
						printf("[[장애물]]");
					}
				}
			}

			else
			{
				printf(" = ");
			}
		}
		printf("| 끝 |\n");

		if (end.cnt == 3)
		{
			c++;
		}
		else
		{
			end.cnt = 0;
		}

		// 충돌확인, 이동.... 1번 개미 - 충돌확인 - 방향변경확인 - 이동 >>>>>>>>>>> 개미 시점으로 움직여야함
		for (int i = 0, v = 0, s = 0; i < at.cnt;)
		{
			s = at.lct[i][0];
			v = at.lct[i][1];
			// printf("%d번 / %d / %d\n",i + 1, at.lct[i][0], at.lct[i][1]);

			// 충돌체 있음
			if (disp.point[s+v][1] != 0)
			{
				if (disp.point[s + v][0] != 0)
				{
					// 충돌체가 장애물
					if (disp.point[s + v][1] == 3)
					{
						for (int z = 0; z < bkt.cnt; z++)
						{
							if (s + v == bkt.lct[z][0])
							{
								disp.point[bkt.lct[z][0]][0] = 0;
								disp.point[bkt.lct[z][0]][1] = 0;
								at.lct[i][1] = at.lct[i][1] * -1;
							}
						}
					}
					// 충돌체가 개미 >>>>>>>>>>>>>> 충돌하면 출력이 안됀다
					else if(disp.point[s+v][1] == 1 || disp.point[s+v][1] == -1)
					{
						for (int z = 0; z < at.cnt; z++)
						{
							if (i != z)
							{
								if (s + v == at.lct[z][0])
								{
									if (at.lct[i][1] * -1 == at.lct[z][1])
									{
										// printf("개미 %d, 변경 전 - %d / ", i, at.lct[i][1]);
										at.lct[i][1] = at.lct[i][1] * -1;
										at.lct[z][1] = at.lct[z][1] * -1;
										// printf("변경 후 - %d\n", at.lct[i][1]);
									}

								}
							}
						}
					}
				}
			}

			// 충돌체 없음 - 이동 >>>>>>>>> 왜 덮어쓰기가 되는가
			else
			{
				// 이동 후 기존 자리 초기화
				disp.point[at.lct[i][0]][0] = 0;
				disp.point[at.lct[i][0]][1] = 0;


				at.lct[i][0] = at.lct[i][0] + at.lct[i][1];
				if (at.lct[i][0] == 0)
				{
					at.lct[i][1] = 0;
					disp.point[at.lct[i][0]][0] = 0;
					disp.point[at.lct[i][0]][1] = 0;

					// 등수넣기
					if (at.lct[i][3] == 0)
					{
						at.lct[i][3] = w;
						w++;
					}
				}

				else if (at.lct[i][0] == fid.cnt)
				{
					at.lct[i][1] = 0;
					disp.point[at.lct[i][0]][0] = fid.cnt;
					disp.point[at.lct[i][0]][1] = 0;

					if (at.lct[i][3] == 0)
					{
						at.lct[i][3] = w;
						w++;
					}
				}

				else
				{
					disp.point[at.lct[i][0]][0] = i + 1;
					disp.point[at.lct[i][0]][1] = at.lct[i][1];
				}



				// 총 이동거리 합
				if (at.lct[i][1] != 0)
				{
					at.lct[i][2] = at.lct[i][2] + 1;
				}
				i++;
			}
		}



		// 모든 개미 떨어질 경우 반복종료
		for (int i = 0; i < at.cnt; i++)
		{
			if (at.lct[i][1] == 0)
			{
				end.cnt = end.cnt + 1;
			}
		}

	}

	// 결과
	printf("\n[[ 결 과 ]]\n");

	// 등수표시
	for (int i = 0; i < at.cnt; i++)
	{
		printf("개미 %d 번 / 총 이동거리 - %d 칸(분) / 순위 - %d\n", i + 1, at.lct[i][2], at.lct[i][3]);
	}
}
