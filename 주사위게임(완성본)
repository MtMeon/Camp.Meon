#include<stdio.h>
#include<Time.h>

int main()
{
	int p1n, p2n, p1m, p2m, p1b, p2b, p1d[10][2], p2d[10][2], p1r[10] = { 0, }, p2r[10] = { 0, }, p1c[10] = { 0, }, p2c[10] = { 0, }, score[10][2] = { {0,} },
		n[10], tb[10] = { 0, }, p1l, p2l, l[10][2] = { {0, } }, p1so = 0, p2so = 0;
	int s, b, t, tadd, br = 0, bs = 0, cn = 0, dnm = 0, over = 0;
	int dice;
	char inputd[7], d[12][7] = { {"1"},{"2"},{"3"},{"4"},{"5"},{"6"},{"7"},{"8"},{"9"},{"0"},{"굴려"},{"굴린다"} }, win[10][2][3] = { {""}, };

	// 제목
	printf("== 주사위 게임로 숫자 맞추기 == \n");

	// 최초 소지금 입력
	printf("플레이어1의 현재 소지금을 입력하세요 - ");
	scanf("%d", &p1m);
	printf("플레이어2의 현재 소지금을 입력하세요 - ");
	scanf("%d", &p2m);
	printf("플레이어1의 소지금 - %d 원\n", p1m);
	printf("플레이어2의 소지금 - %d 원\n", p2m);

	// 게임 시작
	for (int t = 10; t > 0;)
	{
		//숫자 결정
		if (t != 10)
		{
			if (cn == 1)
			{
				printf("\n이전 턴에서 숫자를 맞추거나 범위내였기 때문에 숫자를 재지정합니다.\n");
			}
		}
		printf("\n[ [ %d 턴 시작 ] ]\n", 11 - t);
		printf("각 플레이어는 1 ~ 12 까지의 숫자 중에서 하나를 입력합니다.\n");

		// 숫자입력 - 플레이어1
		do
		{
			printf("\n< < 숫자입력 '플레이어1' 순서 > >\n");
			printf("플레이어1 숫자 입력 - ");
			scanf("%d", &p1n);
			if (p1n > 12)
			{
				printf("현재 입력된 숫자는 %d 입니다. 범위내 숫자로 다시 입력합니다.\n", p1n);
			}
		} while (p1n > 12);

		// 숫자입력 - 플레이어2
		do
		{
			printf("\n< < 숫자입력 '플레이어2' 순서 > >\n");
			printf("플레이어2 숫자 선택 - ");
			scanf("%d", &p2n);
			if (p2n > 12)
			{
				printf("현재 입력된 숫자는 %d 입니다. 범위내 숫자로 다시 입력합니다.\n", p2n);
			}
		} while (p2n > 12);
		printf("\n플레이어1 숫자 입력 결과 - %d\n", p1n);
		printf("플레이어2 숫자 입력 결과 - %d\n\n", p2n);

		// 맞춰야 할 숫자 결정
		n[10 - t] = (p1n + p2n) / 2;
		printf("플레이어간 숫자를 통해 결정된 숫자는 %d 입니다.\n", n[10 - t]);

		// 게임본문
		do
		{
			// 배팅금 관련 조건 미충족시 반복
			do
			{
				// 현재 턴 알림
				if (bs > 0)
				{
					printf("배팅금에 대해 전원 동의가 아니므로 재지정합니다.\n");
				}
				printf("\n현재 %d 턴 진행하겠습니다. 잔여 턴은 %d 턴 입니다.", 11 - t, t - 1);

				// 배팅금액 설정
				printf("이번 턴에 대한 배팅금을 정하겠습니다.\n");

				// 배팅 - 플레이어1
				printf("\n< < 배팅금 입력 '플레이어1' 순서 > >\n");
				printf("플레이어1의 현재 소지금 - %d\n", p1m);
				printf("플레이어1의 배팅금액을 입력하세요 - ");
				scanf("%d", &p1b);

				// 배팅 - 플레이어2
				printf("\n< < 배팅금 입력 '플레이어2' 순서 > >\n");
				printf("플레이어2의 현재 소지금 - %d\n", p2m);
				printf("플레이어2의 배팅금액을 입력하세요 - ");
				scanf("%d", &p2b);

				// 배팅금 결정 - 배팅금 한도 설정 필요
				printf("\n< < 배팅금 결정 순서 > >\n");
				if (bs > 0)
				{
					printf("배팅금에 모든 플레이어가 동의하지 않아 재지정합니다.");
				}
				printf("플레이어1이 입력한 배팅금 - %d 원\n", p1b);
				printf("플레이어2가 입력한 배팅금 - %d 원\n", p2b);
				printf("\n배팅 금액은 각 플레이어의 배팅금액의 중간값으로 지정됩니다.\n");
				printf("설정된 배팅금은 %d 원 입니다.\n", (p1b + p2b) / 2);
				if ((p1b + p2b) / 2 > p1m)
				{
					printf("플레이어1 소지금보다 많은 금액이니 다시 입력하세요. (플레이어1 소지금 - %d 원)\n", p1m);
					bs = 0;
				}
				else if ((p1b + p2b) / 2 > p2m)
				{
					printf("플레이어2 소지금보다 많은 금액이니 다시 입력하세요. (플레이어1 소지금 - %d 원)\n", p2m);
					bs = 0;
				}
				else
				{
					printf("\n< < 승패결정 후 예상 결과 > >\n");
					printf("(플레이어1 승리시)\n");
					printf("플레이어1 소지금 - %d 원\n플레이어2 소지금 - %d 원\n", (p1b + p2b) / 2 + br + p1m, -(p1b + p2b) / 2 - br + p2m);
					printf("(플레이어2 승리시)\n");
					printf("플레이어1 소지금 - %d 원\n플레이어2 소지금 - %d 원\n", -(p1b + p2b) / 2 - br + p1m, (p1b + p2b) / 2 + br + p2m);
					if ((p1b + p2b / 2) - p1m == 0)
					{
						printf("* 경고 * 플레이어1 올인 상태입니다.\n");
					}
					if ((p1b + p2b / 2) - p2m == 0)
					{
						printf("* 경고 * 플레이어2 올인 상태입니다.\n");
					}
					printf("\n플레이어1 계속 진행하겠습니까? (1.계속 진행 // 2.배팅금 재지정) - ");
					scanf("%d", &s);
					if (s == 1)
					{
						printf("플레이어1 - 계속 진행을 선택하였습니다.\n");
						bs = bs + 1;
					}
					if (s == 2)
					{
						printf("플레이어1 - 배팅금 재지정을 선택하였습니다.\n");
						bs = 1;
					}
					printf("\n플레이어2 계속 진행하겠습니까? (1.계속 진행 // 2.배팅금 재지정) - ");
					scanf("%d", &s);
					if (s == 1)
					{
						printf("플레이어2 - 계속 진행을 선택하였습니다.\n");
						bs = bs + 1;
					}
					if (s == 2)
					{
						printf("플레이어2 - 배팅금 재지정을 선택하였습니다.\n");
						bs = 1;
					}
				}
			} while (bs < 2);

			//배팅금 최종 확인
			printf("\n모든 플레이어가 배팅금에 동의하였습니다. 현재 배팅금액 %d 원, 이전까지 누적 배팅금액 %d 원, 총 적용 배팅금액 %d 원 입니다.\n", (p1b + p2b) / 2, br, (p1b + p2b) / 2 + br);

			// 주사위 굴리기 안내
			printf("\n주사위를 굴립니다. 1회씩 번갈아가며 굴리며 각자 총 2회를 굴리면 턴이 넘어갑니다.\n");
			printf("주사위를 굴리는 방법은 입력창에 0 ~ 9까지 숫자 / 굴린다 / 굴려 셋 중 하나만 입력하면 됩니다.\n");
			printf("(참고. 여기서 입력되는 숫자는 주사위값에 영향을 주지 않습니다.)\n");

			// 플레이어별 주사위 굴리기
			for (int c = 0; c < 2; c++)
			{
				for (int p = 0; p < 2; p++)
				{
					printf("\n플레이어%d 주사위 굴리기(%d 턴 %d차) - ", p + 1, 11 - t, c + 1);
					scanf("%s", &inputd);
					for (int n = 0; n < 12; n++)
					{
						if (strcmp(d[n], inputd) == 0)
						{
							printf("\n...주사위가 굴러갑니다...\n");
							printf("\n주사위에서 보이는 숫자 - ");
							srand((unsigned)time(NULL));
							for (int i = 0; i < 1; i++)
							{
								dice = rand() % 5 + 1;
								printf("%d\n", dice);
							}
						}
						else
						{
							dnm = 1;
						}
					}
					if (dnm < 12)
					{
						dnm = 0;
						printf("주사위가 멈췄습니다.\n");
						if (p == 0)
						{
							p1d[10 - t][c] = dice;
							printf("플레이어%d 주사위 결과 (%d 턴 %d차) - %d\n", p + 1, 11 - t, c + 1, dice);
						}
						if (p == 1)
						{
							p2d[10 - t][c] = dice;
							printf("플레이어%d 주사위 결과 (%d 턴 %d차) - %d\n", p + 1, 11 - t, c + 1, dice);
						}
					}
					else
					{
						printf("주사위 굴리는 명령을 다시 확인하고 재입력하세요.\n");
					}
				}
			}

			// 주사위 확인
			for (int i = 0; i < 2; i++)
			{
				p1r[10 - t] = p1r[10 - t] + p1d[10 - t][i];
				p2r[10 - t] = p2r[10 - t] + p2d[10 - t][i];
			}

			// 결과확인
			printf("\n< < 결 과 확 인 > >\n");
			printf("플레이어1의 %d 턴 주사위 합 - %d\n", 11 - t, p1r[10 - t]);
			printf("플레이어2의 %d 턴 주사위 합 - %d\n", 11 - t, p2r[10 - t]);
			printf("맞춰야하는 숫자 - %d\n", n[10 - t]);
			p1c[10 - t] = n[10 - t] - p1r[10 - t];
			p2c[10 - t] = n[10 - t] - p2r[10 - t];
			printf("\n");

			// 결과 범위 간소화를 위한 음수 조정
			if (p1c[10 - t] < 0)
			{
				p1c[10 - t] = p1c[10 - t] * -1;
			}
			if (p2c[10 - t] < 0)
			{
				p2c[10 - t] = p2c[10 - t] * -1;
			}
			printf("[플레이어1의 최종결과]\n");
			printf("맞춰야 할 숫자와의 차이 - %d\n", p1c[10 - t]);
			printf("[플레이어2의 최종결과]\n");
			printf("맞춰야 할 숫자와의 차이 - %d\n", p2c[10 - t]);
			printf("\n");
			printf("승패결과 - ");

			// 둘다 오차범위이내, 숫자 바꿔야함
			if (p1c[10 - t] < 2 && p2c[10 - t] < 2)
			{
				printf("모든 플레이어가 오차범위(+/- 2)이내 입니다.\n");
				printf("따라서 보다 차이가 적은 플레이어가 승리하는 것으로 합니다.\n");

				//플레이어1 승리
				if (p1c[10 - t] < p2c[10 - t])
				{
					printf("이번 %d 턴은 플레이어1 승리\n", 11 - t);
					score[10 - t][0] = 1;
					strcpy(win[10 - t][0], "승");
				}

				//플레이어2 승리
				else if (p2c[10 - t] < p1c[10 - t])
				{
					printf("이번 %d 턴은 플레이어2 승리\n", 11 - t);
					score[10 - t][1] = 1;
					strcpy(win[10 - t][1], "승");
				}

				// 무승부
				else
				{
					if (p1c[10 - t] == 0 && p2c[10 - t] == 0)
					{
						printf("모든 플레이어가 맞춰야 할 숫자가 일치하므로 무승부입니다.\n");
					}
					else
					{
						printf("모든 플레이어의 차이가 동일하여 무승부입니다.\n");
					}
					printf("숫자는 맞췄으므로 숫자 설정부터 다시 시작합니다.\n");
				}
				cn = 1;
			}

			// 둘 중 하나만 오차범위 이상, 숫자 바꿔야함
			else if (p1c[10 - t] < 2 || p2c[10 - t] < 2)
			{

				//플레이어1 승리
				if (p1c[10 - t] < p2c[10 - t])
				{
					printf("이번 %d 턴은 플레이어1 승리\n", 11 - t);
					score[10 - t][0] = 1;
					strcpy(win[10 - t][0], "승");
				}

				//플레이어2 승리
				else if (p2c[10 - t] < p1c[10 - t])
				{
					printf("이번 %d 턴은 플레이어2 승리\n", 11 - t);
					score[10 - t][1] = 1;
					strcpy(win[10 - t][1], "승");
				}

				// 무승부
				else
				{
					printf("모든 플레이어의 차이가 동일하여 무승부입니다.\n");
					printf("숫자는 맞췄으므로 숫자 설정부터 다시 시작합니다.\n");
				}
				cn = 1;
			}

			// 둘 다 오차범위 밖, 숫자 변경 필요없음
			else
			{

				//플레이어1 승리
				if (p1c[10 - t] < p2c[10 - t])
				{
					printf("이번 %d 턴은 플레이어1 승리\n", 11 - t);
					score[10 - t][0] = 1;
					strcpy(win[10 - t][0], "승");
				}

				//플레이어2 승리
				else if (p2c[10 - t] < p1c[10 - t])
				{
					printf("이번 %d 턴은 플레이어2 승리\n", 11 - t);
					score[10 - t][1] = 1;
					strcpy(win[10 - t][1], "승");
				}

				// 무승부
				else
				{
					printf("모든 플레이어의 차이가 동일하여 무승부입니다.\n");
				}
			}

			// 승패결과에 따른 정산
			printf("\n< < 배팅금 정산 > >\n");
			printf("이제 승패결과에 따라 배팅금을 정산하겠습니다.\n\n");
			printf("현재 %d 턴까지 적용된 배팅금은 %d 원 입니다.\n", 11 - t, (p1b + p2b) / 2 + br);
			printf("이번 %d 턴의 승리자는 ", 11 - t);

			//플레이어1 승리 정산
			if (score[10 - t][0] > 0)
			{
				printf("플레이어1 승리 입니다.\n");
				printf("\n[[정산 미리보기]]\n");
				printf("플레이어1 정산 후 - %d 원\n", p1m + (p1b + p2b) / 2 + br);
				printf("플레이어2 정산 후 - %d 원\n", p2m - (p1b + p2b) / 2 - br);
			}

			//플레이어2 승리 정산
			else if (score[10 - t][1] > 0)
			{
				printf("플레이어2 승리 입니다.\n");
				printf("\n[[정산 미리보기]]\n");
				printf("플레이어1 정산 후 - %d 원\n", p1m - (p1b + p2b) / 2 - br);
				printf("플레이어2 정산 후 - %d 원\n", p2m + (p1b + p2b) / 2 + br);
			}

			// 무승부
			else
			{
				printf("무승부가 되어 누적 배팅금만 증가합니다.\n");
				printf("\n[[배팅금 누적 미리보기]]\n");
				printf("현재까지 누적된 배팅금 - %d 원\n", br);
				printf("이번 %d 턴에 정해진 배팅금 - %d 원\n", 11 - t, (p1b + p2b) / 2);
				printf("최종 배팅금 - %d 원\n", (p1b + p2b) / 2 + br);
			}

			// 이후 진행 여부 확인
			printf("\n계속 진행하겠습니까? (1.예 // 2. 이번턴 결과 확인) - ");
			scanf("%d", &s);
			if (s == 1)
			{

				// 정산
				printf("정산이 진행되며 이후 계속 진행합니다.\n");
				printf("\n정산 중...\n");

				// 승패결정시 배팅금 적용 및 초기화
				if (score[10 - t][0] > 0)
				{
					p1m = p1m + br + (p1b + p2b) / 2;
					p2m = p2m - br - (p1b + p2b) / 2;
					tb[10 - t] = (p1b + p2b) / 2 + br;
					br = 0;
				}
				else if (score[10 - t][1] > 0)
				{
					p1m = p1m - br - (p1b + p2b) / 2;
					p2m = p2m + br + (p1b + p2b) / 2;
					tb[10 - t] = (p1b + p2b) / 2 + br;
					br = 0;
				}

				// 무승부시 배팅금 누적
				else
				{
					p1m = p1m - br - (p1b + p2b) / 2;
					p2m = p2m - br - (p1b + p2b) / 2;
					br = (p1b + p2b) / 2 + br;
					tb[10 - t] = br;
				}
				printf("\n...정산완료\n");
				printf("\n");

				// 소지금 부족시 빌리기
				if (p1m == 0 || p2m == 0)
				{
					printf("플레이어 중에 소지금이 부족하여 빌려오는 과정이 진행됩니다.\n");
					for (int i = 0; i < 1;)
					{

						// 플레이어1 돈 빌려오기
						if (p1m == 0)
						{
							printf("플레이어1의 소지금이 부족합니다.\n");
							printf("부족금액 - 현재 %d 원\n", p1m * -1);
							printf("플레이어2 에게서 얼마나 빌려오겠습니까?\n");
							printf("현재 플레이어2 소지금 - %d 원\n", p2m);
							printf("희망 금액 - ");
							scanf("%d", &p1l);
							if (p1l < p2m)
							{
								printf("입력한 희망금액 - %d원\n", p1l);
								printf("빌려오겠습니까? (1.예 // 2.금액 재입력) - ");
								scanf("%d", &s);
								if (s == 1)
								{
									printf("희망금액 %d 원으로 결정합니다.\n", p1l);
									p1m = p1m + p1l;
									p2m = p2m - p1l;
									l[10 - t][0] = p1l;
									i = 1;
								}
								if (s == 2)
								{
									printf("희망금액을 재입력합니다.\n");
								}
							}
							else if (p1l == p2m)
							{
								printf("플레이어2의 모든 소지금 입니다. 이후 게임진행시 배팅 할 수 없기 때문에 재입력하세요.\n");
							}
							else
							{
								printf("플레이어2의 소지금을 초과했습니다. 재입력하세요.\n");
							}
						}

						// 플레이어2 돈 빌려오기
						else if (p2m == 0)
						{
							printf("플레이어2의 소지금이 부족합니다.\n");
							printf("부족금액 - 현재 %d 원\n", p2m * -1);
							printf("플레이어1 에게서 얼마나 빌려오겠습니까?\n");
							printf("현재 플레이어1 소지금 - %d 원\n", p1m);
							printf("희망 금액 - ");
							scanf("%d", &p2l);
							if (p2l < p1m)
							{
								printf("입력한 희망금액 - %d원\n", p2l);
								printf("빌려오겠습니까? (1.예 // 2.금액 재입력) - ");
								scanf("%d", &s);
								if (s == 1)
								{
									printf("희망금액 %d 원으로 결정합니다.\n", p2l);
									p1m = p1m - p2l;
									p2m = p2m + p2l;
									l[10 - t][1] = p2l;
									i = 1;
								}
								if (s == 2)
								{
									printf("희망금액을 재입력합니다.\n");
								}
							}
							else if (p2l == p1m)
							{
								printf("플레이어1의 모든 소지금 입니다. 이후 게임진행시 배팅 할 수 없기 때문에 재입력하세요.\n");
							}
							else
							{
								printf("플레이어1의 소지금을 초과했습니다. 재입력하세요.\n");
							}
						}
						else
						{
							printf("이제 모든 플레이어가 소지금이 있으므로 계속 진행합니다.\n");
							printf("플레이어1 소지금 - %d 원\n", p1m);
							printf("플레이어2 소지금 - %d 원\n", p2m);
							i = 1;
						}
					}
				}

				// 돈 빌려오는 상황이 없는 경우
				else
				{
					printf("현재 %d 턴까지의 결과표를 확인합니다\n", 11 - t);
					cn = 1;
				}

				// 정산 완료 후 턴 증가, 10턴 정산 후 동점시 연장전 진행여부, 턴별 배팅금
			}
			if (s == 2)
			{
				printf("이번턴의 결과를 확인합니다.\n");

			}
		} while (cn == 0);

		//결과표
		// 미종료시 결과표 제폭
		if (over < 1)
		{
			printf("\n< < 현재 결과표(%d 턴) > >\n", 11 - t);
		}

		// 최종 결과표 제목
		else
		{
			printf("\b< < 최종 결과표(%d 턴 종료) > >\n", 11 - t);
		}

		//결과표 본문
		// 스코어 계산기
		if (score[10 - t][0] == 1)
		{
			p1so = p1so + 1;
		}
		if (score[10 - t][1] == 1)
		{
			p2so = p2so + 1;
		}
		printf("스코어 플1 (%d) : (%d) 플2\n", p1so, p2so);
		for (int r = 0; r < 11 - t; r++)
		{
			printf("%d턴 | 배팅금 %d원 | 플1 (%s) - (%s) 플2 | ", r + 1, tb[r], win[r][0], win[r][1]);
			if (l[r][0] > 0)
			{
				printf("플1 빚 - %d 원 |", l[r][0]);
			}
			else if (l[r][1] > 0)
			{
				printf("플2 빚 - %d 원 |", l[r][1]);
			}
			printf("\n");
		}
		printf("\n");

		// 턴 넘기기 혹은 종료
		if (t == 0)
		{

			// 마지막턴 진행
			printf("마지막 턴까지 진행하였습니다.\n");
			if (p1so == p2so)
			{
				printf("하지만 아직 동점인 상태로 승자가 결정나지 않았습니다.\n");
				printf("현재 스코어 (플레이어1) %d : %d (플레이어2)\n", p1so, p2so);
				printf("연장전을 하시겠습니까? (1.예 // 2. 종료) - ");
				scanf("%d", &s);

				// 연장전 진행
				if (s == 1)
				{
					printf("연장전을 진행합니다.\n");
					printf("얼마나 연장하시겠습니까? (턴 수) - ");
					scanf("%d", &tadd);
					t = t + tadd;
					printf("%d 턴 연장되었습니다.\n", t);
				}

				// 연장전 없음
				else
				{
					printf("연장전 없이 무승부로 종료합니다.\n");
					return 0;
				}
			}
		}

		// 둘중하나 마이너스인 경우 종료
		else if (p1m < 0 || p2m < 0)
		{
			if (p1m < 0)
			{
				printf("플레이어1 의 소지금이 %d 원이므로 게임을 종료합니다.\n", p1m);
			}
			else if (p2m < 0)
			{
				printf("플레이어2 의 소지금이 %d 원이므로 게임을 종료합니다.\n", p2m);
			}
			printf("더 이상의 진행이 불가하여 게임을 종료합니다.\n");
			return 0;
		}

		// 일반진행
		else
		{
			printf("다음 턴으로 진행하시겠습니까? (1.예 / 2. 종료) - ");
			scanf("%d", &s);
			if (s == 1)
			{
				printf("다음턴으로 넘어갑니다.\n");
				t--;
			}
			if (s == 2)
			{
				printf("게임을 종료합니다.\n");
				return 0;
			}
		}
	}
}
